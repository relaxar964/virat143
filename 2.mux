Code:
MUX:
module mux8_1(out, D0, D1, D2, D3, D4, D5, D6, D7, S0, S1, S2);
output out;
input D0, D1, D2, D3, D4, D5, D6, D7, S0, S1, S2;
wire s0bar, s1bar, s2bar, T1, T2, T3, T4, T5, T6, T7, T8;

not u1(s1bar, S1);
not u2(s0bar, S0);
not u3(s2bar, S2);

and_gate u4(T1, D0, s0bar, s1bar, s2bar);
and_gate u5(T2, D1, S0, s1bar, s2bar);
and_gate u6(T3, D2, s0bar, S1, s2bar);
and_gate u7(T4, D3, S0, S1, s2bar);
and_gate u8(T5, D4, s0bar, s1bar, S2);
and_gate u9(T6, D5, S0, s1bar, S2);
and_gate u10(T7, D6, s0bar, S1, S2);
and_gate u11(T8, D7, S0, S1, S2);
or_gate u12(out, T1, T2, T3, T4, T5, T6, T7, T8);
endmodule

module and_gate(output a, input b, c, d, e);
assign a = b & c & d & e;
endmodule

2018105501 ABDUL KADER SHAFEEQ S

module or_gate(output l, input m, n, o, p, q, r, s, t);
assign l = m | n | o | p | q | r | s | t;
endmodule

Testbench:
module mux8_1tb;
wire out;
reg D0, D1, D2, D3, D4, D5, D6, D7, S0, S1, S2;
mux8_1 uut(.out(out), .D0(D0), .D1(D1), .D2(D2), .D3(D3), .D4(D4), .D5(D5), .D6(D6),
.D7(D7), .S0(S0), .S1(S1), .S2(S2));
initial
begin
D0=1; D1=0; D2=0; D3=0; D4=0; D5=0; D6=0; D7=0;S0=0; S1=0; S2=0;
#5000 $finish;
end
initial
begin
#100;
S2=0;S1=0;S0=1;D0=0;D1=1;
#100;
S2=0;S1=1;S0=0;D0=0;D1=0;D2=1;
#100;
S2=0;S1=1;S0=1;D0=0;D1=0;D2=0;D3=1;
#100;
S2=1;S1=0;S0=0;D0=0;D1=0;D2=0;D3=0;D4=1;
#100;
S2=1;S1=0;S0=1;D0=0;D1=0;D2=0;D3=0;D4=0;D5=1;

2018105501 ABDUL KADER SHAFEEQ S

#100;
S2=1;S1=1;S0=0;D0=0;D1=0;D2=0;D3=0;D4=0;D5=0;D6=1;
#100;
S2=1;S1=1;S0=1;D0=0;D1=0;D2=0;D3=0;D4=0;D5=0;D6=0;D7=1;
#100;
end
always@(D0 or D1 or D2 or D3 or D4 or D5 or D6 or D7 or S0 or S1 or S2)
$monitor("At time = %t, Output = %d", $time, out);
endmodule
